const double eps = 0.01;

// 1. maximising conjunction

// testing point (0.0, 1.0)

// RESULT: True
<<1>> (R{"r1"}/{"c"}>=0.0 [ C ] & R{"r2"}/{"c"}>=1.0 [ C ])

// RESULT: False
<<1>> (R{"r1"}/{"c"}>=0.0 + eps [ C ] & R{"r2"}/{"c"}>=1.0 [ C ])

// RESULT: False
<<1>> (R{"r1"}/{"c"}>=0.0 [ C ] & R{"r2"}/{"c"}>=1.0 + eps [ C ])

// testing point (0.25, 0.25)

// RESULT: True
<<1>> (R{"r1"}/{"c"}>=0.25 [ C ] & R{"r2"}/{"c"}>=0.25 [ C ])

// RESULT: False
<<1>> (R{"r1"}/{"c"}>=0.25 + eps [ C ] & R{"r2"}/{"c"}>=0.25 [ C ])

// RESULT: False
<<1>> (R{"r1"}/{"c"}>=0.25 [ C ] & R{"r2"}/{"c"}>=0.25 + eps [ C ])


// 2. maximising disjunction

// testing point (0.25, 1.0)

// RESULT: True
<<1>> (R{"r1"}/{"c"}>=0.25 [ C ] | R{"r2"}/{"c"}>=1.0 [ C ])

// RESULT: False
<<1>> (R{"r1"}/{"c"}>=0.25 + eps [ C ] | R{"r2"}/{"c"}>=1.0 + eps [ C ])


// 3. minimising conjunction

// testing point (1.0, 0.25)

// RESULT: True
<<1>> (R{"r1"}/{"c"}<=1.0 [ C ] & R{"r2"}/{"c"}<=0.25 [ C ])

// RESULT: False
<<1>> (R{"r1"}/{"c"}<=1.0 - eps [ C ] & R{"r2"}/{"c"}<=0.25 [ C ])

// RESULT: False
<<1>> (R{"r1"}/{"c"}<=1.0 [ C ] & R{"r2"}/{"c"}<=0.25 - eps [ C ])


// 4. minimising disjunction

// testing point (0.25, 0.25)

// RESULT: True	 
<<1>> (R{"r1"}/{"c"}<=0.25 [ C ] | R{"r2"}/{"c"}<=0.25 [ C ])

// RESULT: False
<<1>> (R{"r1"}/{"c"}<=0.25 - eps [ C ] | R{"r2"}/{"c"}<=0.25 - eps [ C ])

// testing point (1.0, 0.0)

// RESULT: True
<<1>> (R{"r1"}/{"c"}<=1.0 [ C ] | R{"r2"}/{"c"}<=0.0 [ C ])

// RESULT: False
<<1>> (R{"r1"}/{"c"}<=1.0 - eps [ C ] | R{"r2"}/{"c"}<=0.0 - eps [ C ])