// MDP-DTMC model implementing collective decision making algorithm of:
// F. Saffre and A. Simaitis. Host Selection through Collective Decision
// ACM Transactions on Autonomous and Adaptive Systems (TAAS). 2011. 
//
// In contrast with original (DTMC) model, some agents are allowed to 
// make a decision whether to explore or communicate modeled by non-determinism.
// 
// Model has to be built using PRISM preprocessor (http://www.prismmodelchecker.org/prismpp/)
// using the following command: prismpp cdm_mdp-dtmc.pp <N> <D> <K> <L> > cmd_mdp-dtmc.pm, where 
// <N> - number of agents,
// <D> - number of deterministic agents,
// <K> - number of hosting sites,
// <L> - number of confidence levels.
//
// Hosting site qualities and other constant model parameters should
// be adjusted directly in the model file.
//
// Expected model size is: K^2N * L^N
//
// Aistis Simaitis 23/06/11 

smg

// number of agents
const int N = 2;

// number of sites
const int K = 2;

// number of confidence levels
const int L = 2;

// model parameters
const double Pexp = 0.5;
const double eta = 2.0;
const double gamma = 2.0;
const double lambda = 2.0;

// quality of the sites
const double Q1 = 1.0;
const double Q2 = 1.0;

// confidence levels of agents
global confidence1 : [1..L];
global confidence2 : [1..L];

// site preferences of agents
global preference1 : [1..K];
global preference2 : [1..K];

// non-deterministic agent definitions
module player1

	// location of the player
	location1 : [1..K];

	// exploring sites
	[] true ->	  0 : true
			// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch1_1 : (location1'=1) & (preference1'=1) & (confidence1'=1)
			  + 1/K * (1-Pswitch1_1) : (location1'=1)

						// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch1_2 : (location1'=2) & (preference1'=2) & (confidence1'=1)
			  + 1/K * (1-Pswitch1_2) : (location1'=2)

			;
	// communicating with other agents
	[] true ->	  0 : true
			// -- trying to communicate with agent
			  + Pmeet_p1 * (location1=location2?1:0) * (preference1=preference2?1:0) : (confidence1'=inc_conf1) & (confidence2'=inc_conf2) // same site
			  + Pmeet_p1 * (location1=location2?1:0) * (preference1=preference2?0:1) * Pwin1_2 : (confidence1'=inc_conf1) & (preference2'=preference1) & (confidence2'=1) // win
			  + Pmeet_p1 * (location1=location2?1:0) * (preference1=preference2?0:1) * (1-Pwin1_2) : (confidence1'=1) & (preference1'=preference2) & (confidence2'=inc_conf2) // lose
			
			// -- no other agents at the site
			  + (count_p1=1?1:0) : true;

endmodule

module player2

	// location of the player
	location2 : [1..K];

	// exploring sites
	[] true ->	  0 : true
			// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch2_1 : (location2'=1) & (preference2'=1) & (confidence2'=1)
			  + 1/K * (1-Pswitch2_1) : (location2'=1)

						// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch2_2 : (location2'=2) & (preference2'=2) & (confidence2'=1)
			  + 1/K * (1-Pswitch2_2) : (location2'=2)

			;
	// communicating with other agents
	[] true ->	  0 : true
			// -- trying to communicate with agent
			  + Pmeet_p2 * (location2=location1?1:0) * (preference2=preference1?1:0) : (confidence2'=inc_conf2) & (confidence1'=inc_conf1) // same site
			  + Pmeet_p2 * (location2=location1?1:0) * (preference2=preference1?0:1) * Pwin2_1 : (confidence2'=inc_conf2) & (preference1'=preference2) & (confidence1'=1) // win
			  + Pmeet_p2 * (location2=location1?1:0) * (preference2=preference1?0:1) * (1-Pwin2_1) : (confidence2'=1) & (preference2'=preference1) & (confidence1'=inc_conf1) // lose
			
			// -- no other agents at the site
			  + (count_p2=1?1:0) : true;

endmodule


// deterministic agent definitions



// formulae to increase agents' confidence levels
	
	formula inc_conf1 = confidence1=L ? L : (confidence1+1);
	formula inc_conf2 = confidence2=L ? L : (confidence2+1);

// formulae to count agents at sites

	// probability for agent to meet another agent at its location
	formula Pmeet_p1 = (count_p1=1?0:1/(count_p1-1));
	formula Pmeet_p2 = (count_p2=1?0:1/(count_p2-1));

	// the number of agents at agent's current location
	formula count_p1 =  location1=1 ? count1 : (count2) ;
	formula count_p2 =  location2=1 ? count1 : (count2) ;

	// number of agents at each location
	formula count1 =  (location1=1?1:0) + (location2=1?1:0) ;
	formula count2 =  (location1=2?1:0) + (location2=2?1:0) ;

// formulae to get qualities of agents' preferred sites
	formula Q_p1 =  preference1=1 ? Q1 : (Q2) ;
	formula Q_p2 =  preference2=1 ? Q1 : (Q2) ;

// formulae for evaluating the sites (Pswitchij = prob of to switch from size i to site j).
	
	formula Pswitch1_1 = preference1=1 ? 0 : pow(Q1, eta) / (pow(Q1, eta) + pow(Q_p1, eta));	
	formula Pswitch1_2 = preference1=2 ? 0 : pow(Q2, eta) / (pow(Q2, eta) + pow(Q_p1, eta));	

	formula Pswitch2_1 = preference2=1 ? 0 : pow(Q1, eta) / (pow(Q1, eta) + pow(Q_p2, eta));	
	formula Pswitch2_2 = preference2=2 ? 0 : pow(Q2, eta) / (pow(Q2, eta) + pow(Q_p2, eta));	


// formulae for conducting tournaments

	formula Pwin1_2 = (pow(Q_p1, lambda) * pow(confidence1, gamma)) / 
		((pow(Q_p1, lambda) * pow(confidence1, gamma))+(pow(Q_p2, lambda) * pow(confidence2, gamma)));

	formula Pwin2_1 = 1-Pwin1_2;


// labeling states
	
// -- formulae to generate labels
	
	// agreement on site
	formula all_prefer_1 =  preference1=1 & preference2=1 ;
	formula all_prefer_2 =  preference1=2 & preference2=2 ;

	// compute total confidence
	formula total_confidence =  confidence1 + confidence2 ;
	
	// confidence measures
	formula all_max_conf = total_confidence/N = L;
	formula half_max_conf = (( confidence1=L?1:0 + confidence2=L?1:0 )/N) >= 0.5;
		
// -- labels

	// agreement on particular sites
	label "all_prefer_1" = all_prefer_1;
	label "all_prefer_2" = all_prefer_2;

	// all agents have max confidence
	label "all_max_conf" = all_max_conf;

	label "half_max_conf" = half_max_conf;	

	// agreement on a site
	label "decision_made" =  all_prefer_1 | all_prefer_2 ;

	





