//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// Electrical Starting, Generation, Conversion and Distribution System Architecture for //
//     a More Electric Vehicle                                                          //
//                                                                                      //
// Modelled after European Patent EP 1 792 379 B1, by Rodney G. Michalko                //
//                                                                                      //
// Author: Clemens Wiltsche, University of Oxford, 2014 (clemens.wiltsche@cs.ox.ac.uk)  //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

// Compositional top-level property of full system
comp("P210a", "P210b");

// Global top-level property of full system

//////////////////////////////////////////////////////////////////////////////////////////
// Properties of HVAC left (210a)

const double u_fail_l = 0.1; // guar: upper bound on failures
const double l_buses_l = 0.5; // guar: lower bound on powering the buses
const double l_i1_l = 0.5; // guar: lower bound on the left side delivering power over I1

// minimise failures
"safe_210a" : and(R{"fail_l"}<=u_fail_l [ S ])

// maximise uptime for buses
"buses_210a" : and(R{"buses_l"}>=l_buses_l [ S ])

// maximise power over interface
"I1_210a" : and(R{"i1_l"}>=l_i1_l [ S ])

// full property of HVAC left (210a)
"P210a" : and("safe_210a", "I1_210a", "buses_210a")


//////////////////////////////////////////////////////////////////////////////////////////
// Properties of HVAC right (210b)

const double u_switch_r = 0.9; // guar: upper bound on number of switches
const double u_fail_r = 0.2; // guar: upper bound on failures
const double l_buses_r = 0.5; // guar: lower bound on powering the buses
const double l_i1_r = 0.5; // guar: lower bound on the right side delivering power over I1

// minimise failures
"safe_210b" : and(R{"fail_r"}<=u_fail_r [ S ])

// minimise switches
"switch_210b" : and(R{"switches_r"}<=u_switch_r [ S ])


// buses:
// assume left hand side delivers power (i1_l)
// and then guarantee that the buses are powered (buses_r)
"buses_210b" : impl(R{"i1_l"}>=l_i1_l [ S ],
	            R{"buses_r"}>=l_buses_r [ S ])

// interface I1:
// guarantee that the interface I1 is powered (i1_l)
"I1_210b" : and(R{"i1_r"}>=l_i1_r [ S ])

// full property of HVAC right (210b)
"P210b" : and("safe_210b", "I1_210b", "buses_210b")
