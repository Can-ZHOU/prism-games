// CSG model of Stackelberg Equilibrium
// Stochastic Stackelberg Security Game

csg 

player pA mA endplayer
player pB mB endplayer


// Actions for player A and B
module mA
    // the edges in the graph
    // state = 1
    [a2] s=1 -> true;
    [a3] s=1 -> true;
    [a4] s=1 -> true;
    [a5] s=1 -> true;

    // state = 2
    [a1] s=2 -> true;
    [a4] s=2 -> true;

    // state = 3
    [a1] s=3 -> true;
    [a5] s=3 -> true;

    // state = 4
    [a1] s=4 -> true;
    [a2] s=4 -> true;

    // state = 5
    [a1] s=5 -> true;
    [a3] s=5 -> true;
endmodule

module mB
    [b1] true -> true;
    [b2] true -> true;
    [b3] true -> true;
    [b4] true -> true;
    [b5] true -> true;
    
    [wait] true -> true;
endmodule


// Transitions for player A and B
module mT
    // five nodes plus absorbing state
    s : [1..6];

    [a2,wait] s=1 -> 0.4:(s'=1) + 0.6:(s'=2);
    [a3,wait] s=1 -> 0.4:(s'=1) + 0.6:(s'=3);
    [a4,wait] s=1 -> 0.4:(s'=1) + 0.6:(s'=4);
    [a5,wait] s=1 -> 0.4:(s'=1) + 0.6:(s'=5);

    [a1,wait] s=2 -> 0.4:(s'=2) + 0.6:(s'=1);
    [a4,wait] s=2 -> 0.4:(s'=2) + 0.6:(s'=4);

    [a1,wait] s=3 -> 0.4:(s'=3) + 0.6:(s'=1);
    [a5,wait] s=3 -> 0.4:(s'=3) + 0.6:(s'=5);

    [a1,wait] s=4 -> 0.4:(s'=4) + 0.6:(s'=1);
    [a2,wait] s=4 -> 0.4:(s'=4) + 0.6:(s'=2);

    [a1,wait] s=5 -> 0.4:(s'=5) + 0.6:(s'=1);
    [a3,wait] s=5 -> 0.4:(s'=5) + 0.6:(s'=3);
    
    [a2,b1] true -> 1:(s'=6);
    [a2,b2] true -> 1:(s'=6);
    [a2,b3] true -> 1:(s'=6);
    [a2,b4] true -> 1:(s'=6);
    [a2,b5] true -> 1:(s'=6);
    [a3,b1] true -> 1:(s'=6);
    [a3,b2] true -> 1:(s'=6);
    [a3,b3] true -> 1:(s'=6);
    [a3,b4] true -> 1:(s'=6);
    [a3,b5] true -> 1:(s'=6);

    [a2,b1] s=1 -> 0:(s'=1) + 1:(s'=6);
    [a2,b2] s=1 -> 0:(s'=1) + 1:(s'=6);
    [a2,b3] s=1 -> 0:(s'=1) + 1:(s'=6);
    [a2,b4] s=1 -> 0:(s'=1) + 1:(s'=6);
    [a2,b5] s=1 -> 0:(s'=1) + 1:(s'=6);

    [a3,b1] s=1 -> 0:(s'=1) + 1:(s'=6);
    [a3,b2] s=1 -> 0:(s'=1) + 1:(s'=6);
    [a3,b3] s=1 -> 0:(s'=1) + 1:(s'=6);
    [a3,b4] s=1 -> 0:(s'=1) + 1:(s'=6);
    [a3,b5] s=1 -> 0:(s'=1) + 1:(s'=6);


    [a1] s=2 -> 0.4:(s'=2) + 0.6:(s'=1);
    [a4] s=2 -> 0.4:(s'=2) + 0.6:(s'=4);
    [a6] s=2 -> 0.4:(s'=2) + 0.6:(s'=6);

    [a1] s=3 -> 0.4:(s'=3) + 0.6:(s'=1);
    [a5] s=3 -> 0.4:(s'=3) + 0.6:(s'=5);
    [a6] s=3 -> 0.4:(s'=3) + 0.6:(s'=6);

    [a1] s=4 -> 0.4:(s'=4) + 0.6:(s'=1);
    [a2] s=4 -> 0.4:(s'=4) + 0.6:(s'=2);
    [a6] s=4 -> 0.4:(s'=4) + 0.6:(s'=6);

    [a1] s=5 -> 0.4:(s'=5) + 0.6:(s'=1);
    [a3] s=5 -> 0.4:(s'=5) + 0.6:(s'=3);
    [a6] s=5 -> 0.4:(s'=5) + 0.6:(s'=6);
endmodule


// Rewards for player A and B
rewards "rA"
    [a1,b1] s=1 : 10;
    [a1,b2] s=1 : -5;
    [a2,b1] s=1 : -8;
    [a2,b2] s=1 : 6;

    [a1,b1] s=2 : 7;
    [a1,b2] s=2 : -1;
    [a2,b1] s=2 : -3;
    [a2,b2] s=2 : 2;
endrewards

rewards "rB"
    [a1,b1] s=1 : -10;
    [a1,b2] s=1 : 6;
    [a2,b1] s=1 : 4;
    [a2,b2] s=1 : -4;

    [a1,b1] s=2 : -5;
    [a1,b2] s=2 : 6;
    [a2,b1] s=2 : 10;
    [a2,b2] s=2 : -10;
endrewards